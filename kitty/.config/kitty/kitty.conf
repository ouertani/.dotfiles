#: Allow other programs to control kitty. If you turn this on, other
#: programs can control all aspects of kitty, including sending text
#: to kitty windows, opening new windows, closing windows, reading the
#: content of windows, etc. Note that this even works over SSH
#: connections. The default setting of no prevents any form of remote
#: control. The meaning of the various values are:
#: password
#:     Remote control requests received over both the TTY device and the socket
#:     are confirmed based on passwords, see remote_control_password.
#: socket-only
#:     Remote control requests received over a socket are accepted
#:     unconditionally. Requests received over the TTY are denied.
#:     See listen_on.
#: socket
#:     Remote control requests received over a socket are accepted
#:     unconditionally. Requests received over the TTY are confirmed based on
#:     password.
#: no
#:     Remote control is completely disabled.
#: yes
#:     Remote control requests are always accepted.
# NOTE: Enable remote control so external programs (e.g. sketchybar) can query Kitty.
# The 'listen_on' directive below is ignored unless this is set to 'yes', 'socket', or 'socket-only'.
allow_remote_control yes

#: Listen to the specified socket for remote control connections. Note
#: that this will apply to all kitty instances. It can be overridden
#: by the kitty --listen-on command line option. For UNIX sockets,
#: such as unix:${TEMP}/mykitty or unix:@mykitty (on Linux).
#: Environment variables are expanded and relative paths are resolved
#: with respect to the temporary directory. If {kitty_pid} is present,
#: then it is replaced by the PID of the kitty process, otherwise the
#: PID of the kitty process is appended to the value, with a hyphen.
#: For TCP sockets such as tcp:localhost:0 a random port is always
#: used even if a non-zero port number is specified.  See the help for
#: kitty --listen-on for more details. Note that this will be ignored
#: unless allow_remote_control is set to either: yes, socket or
#: socket-only. Changing this option by reloading the config is not
#: supported.
# NOTE: Create a UNIX socket for remote control. This lets external scripts (like
# sketchybar) run `kitten @ --to unix:/tmp/kitty-<pid>` and retrieve titles.
# The actual socket will be created as /tmp/kitty-<pid>.
listen_on unix:/tmp/kitty

# Kitty theme
# Add the theme at the top, any setting below the theme will be overriden
include ~/.config/kitty/active-theme.conf

#: The value of the TERM environment variable to set. Changing this
#: can break many terminal programs, only change it if you know what
#: you are doing, not because you read some advice on "Stack Overflow"
#: to change it. The TERM variable is used by various programs to get
#: information about the capabilities and behavior of the terminal. If
#: you change it, depending on what programs you run, and how
#: different the terminal you are changing it to is, various things
#: from key-presses, to colors, to various advanced features may not
#: work. Changing this option by reloading the config will only affect
#: newly created windows.
# 
# xterm-kitty is the default, but I'm hardcoding it just in case
term xterm-kitty

font_size 18

# Make sure you have the fonts installed
# This is the only way I could make jetbrains mono work, using the "Mono" word
# at the very end
font_family      JetBrainsMono Nerd Font
font_family      JetBrainsMono Nerd Font Mono Light
bold_font        JetBrainsMono Nerd Font Mono Extra Bold
bold_italic_font JetBrainsMono Nerd Font Mono Extra Bold Italic

# font_family MesloLGM Nerd Font
# font_family MesloLGS Nerd Font
# font_family MesloLGMDZ Nerd Font

# Kitty's font was more spaced compared to alacritty's, tried font variations
# but it didn't change, so I went with this, it works fine
# modify_font cell_width 95%

# I was going crazy
# after a kitty update, font height seemed smaller, this fixed it
# modify_font cell_height 5px

scrollback_lines 10000

# The following command checks if tmux is installed.
# If tmux is installed, it automatically attaches to an existing tmux session.
# If no tmux session exists, a new one is created.
# If tmux is not installed, it simply starts zsh without tmux.
#
# For this to work properly, you need to make sure that your shell is configured
# for homebrew, so you should have this line:
# eval "$(/opt/homebrew/bin/brew shellenv)"
# In your ~/.zprofile file
# If you don't have that line, or if the file doesn't exist, run this:
# echo '' >>~/.zprofile && echo '# Configure shell for brew' >>~/.zprofile && echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >>~/.zprofile && eval "$(/opt/homebrew/bin/brew shellenv)"
#
# This assumes you installed tmux through brew if using macos
# shell zsh --login -c "if command -v tmux >/dev/null 2>&1; then tmux attach || tmux; else zsh; fi"
shell zsh --login

# Old version of above command:
# The 2 commands after login are needed to automatically attach to an existing 
# tmux session, if no session exists, a new one is created
# shell zsh --login -c "tmux attach || tmux"

# Open `sticky.md` in Vim using a custom vimrc file and preven any saved session files from loading.
# - I'm using a bash shell because if I load zsh, my zshrc file is too heavy
# -n      - disables swap files, directly opening the file.
# -u file - uses a custom vimrc.
# -U NONE - prevents loading session files, avoiding prior states or buffers.
# I do want a swap file, as I was losing my changes a lot because I didn't save, will enable auto save later on
# shell bash --login -c "vim -u ~/github/dotfiles-latest/vimrc/vimrc-file-sticky ~/github/dotfiles-latest/neovim/neobean-sticky/sticky.md"
# shell bash --login -c "~/github/dotfiles-latest/yabai/positions/kitty-pos.sh && NVIM_APPNAME=neobean-sticky nvim ~/github/dotfiles-latest/neovim/neobean-sticky/skitty-notes.md"
# shell bash --login -c "~/github/dotfiles-latest/yabai/positions/kitty-pos.sh && NVIM_APPNAME=neobean-sticky nvim \"$HOME/Library/Mobile Documents/com~apple~CloudDocs/github/macos-setup/mac/skitty/skitty-notes.md\""
# shell bash --login -c "~/github/dotfiles-latest/yabai/positions/kitty-pos.sh && NVIM_APPNAME=neobean-sticky nvim \"$HOME/Library/Mobile Documents/com~apple~CloudDocs/github/skitty/skitty-notes.md\""

# # Set the NEOVIM_MODE environment variable when calling neovim, this variable
# # will be accessible within the neovim session
# # NOTE:I'm prepending /opt/homebrew/bin to the PATH, so all the needed binaries (e.g., bash, nvim) are found
#
# # NOTE: Starting neovim with the --listen flag to create a socket at /tmp/skitty-neobean-socket
# # This allows the ~/github/dotfiles-latest/scripts/macos/mac/400-autoPushGithub.sh
# # script to trigger buffer writes and refresh lualine
# # To test the socket:
# # nvim --server /tmp/skitty-neobean-socket --remote-send ':lua vim.notify("Socket deeznuts!", "info")<CR>'
# # The autopush script uses this to trigger a write:
# # nvim --server /tmp/skitty-neobean-socket --remote-send ':silent w<CR>'
# # I'm cleaning up the socket before start, otherwise it's lef there from a
# # previous run and it just stops working
# #
# # I also source the bashrc file to get the MD_HEADING_BG variable exported
# #
# shell bash --login -c "~/github/dotfiles-latest/yabai/positions/kitty-pos.sh && source ~/.bashrc && rm -f /tmp/skitty-neobean-socket && export PATH=\"/opt/homebrew/bin:$PATH\" && export NEOVIM_MODE=skitty && cd \"$HOME/github/skitty\" && NVIM_APPNAME=neobean nvim --listen /tmp/skitty-neobean-socket \"$HOME/github/skitty/supporters.md\" && sleep 1 && ~/github/dotfiles-latest/yabai/positions/kitty-pos.sh"

# When you do fn+ctrl+shift+2 it opens the kitty file in the editor below
editor nvim

# These colors match what I have in my alacritty theme
# Commenting them as they're set by the theme on the top
# foreground #CDD6F4
# background #1E1E2E

# Make kitty borderless
# "yes" disables round corners and hides the title bar 
# "titlebar-only" leaves round corners but hides title bar
# hide_window_decorations yes
hide_window_decorations titlebar-only
# hide_window_decorations titlebar-and-corners

#: The window padding (in pts) (blank area between the text and the
#: window border). A single value sets all four sides. Two values set
#: the vertical and horizontal sides. Three values set top, horizontal
#: and bottom. Four values set top, right, bottom and left.
# window_padding_width 5 5 0 0
# window_padding_width 1 4 1 4
window_padding_width 1 5 2 2
# window_padding_width 0

# I'm adding these below the theme in case the theme sets them
cursor #ebfafa
cursor_text_color #0D1116

#: Ask for confirmation when closing an OS window or a tab with at
#: least this number of kitty windows in it by window manager (e.g.
#: clicking the window close button or pressing the operating system
#: shortcut to close windows) or by the close_tab action. A value of
#: zero disables confirmation. This confirmation also applies to
#: requests to quit the entire application (all OS windows, via the
#: quit action). Negative values are converted to positive ones,
#: however, with shell_integration enabled, using negative values
#: means windows sitting at a shell prompt are not counted, only
#: windows where some command is currently running. Note that if you
#: want confirmation when closing individual windows, you can map the
#: close_window_with_confirmation action.
confirm_os_window_close 0

#: The audio bell. Useful to disable it in environments that require
#: silence.
enable_audio_bell no

#: Use the Option key as an Alt key on macOS. With this set to no,
#: kitty will use the macOS native Option+Key to enter Unicode
#: character behavior. This will break any Alt+Key keyboard shortcuts
#: in your terminal programs, but you can use the macOS Unicode input
#: technique. You can use the values: left, right or both to use only
#: the left, right or both Option keys as Alt, instead. Note that
#: kitty itself always treats Option the same as Alt. This means you
#: cannot use this option to configure different kitty shortcuts for
#: Option+Key vs. Alt+Key. Also, any kitty shortcuts using
#: Option/Alt+Key will take priority, so that any such key presses
#: will not be passed to terminal programs running inside kitty.
#: Changing this option by reloading the config is not supported.
macos_option_as_alt right

# NOTE: The neovide cursor type in kitty came during a YouTube livestream by 
# user "Carlos Medina"
#
#: The cursor shape can be one of block, beam, underline. Note that
#: when reloading the config this will be changed only if the cursor
#: shape has not been set by the program running in the terminal. This
#: sets the default cursor shape, applications running in the terminal
#: can override it. In particular, shell integration
#: <https://sw.kovidgoyal.net/kitty/shell-integration/> in kitty sets
#: the cursor shape to beam at shell prompts. You can avoid this by
#: setting shell_integration to no-cursor.
cursor_shape beam

#: The thickness of the beam cursor (in pts).
cursor_beam_thickness 1.5

#: The thickness of the underline cursor (in pts).
cursor_underline_thickness 2.0

#: The interval to blink the cursor (in seconds). Set to zero to
#: disable blinking. Negative values mean use system default. Note
#: that the minimum interval will be limited to repaint_delay.
cursor_blink_interval 0

#: Stop blinking cursor after the specified number of seconds of
#: keyboard inactivity. Set to zero to never stop blinking.
cursor_stop_blinking_after 0

# Set this to a value larger than zero to enable a “cursor trail” animation. This is an animation that shows a “trail” following the movement of the text cursor. It makes it easy to follow large cursor jumps and makes for a cool visual effect of the cursor zooming around the screen. The actual value of this option controls when the animation is triggered. It is a number of milliseconds. The trail animation only follows cursors that have stayed in their position for longer than the specified number of milliseconds. This prevents trails from appearing for cursors that rapidly change their positions during UI updates in complex applications. See cursor_trail_decay to control the animation speed and cursor_trail_start_threshold to control when a cursor trail is started.
cursor_trail 0

# Controls the decay times for the cursor trail effect when the cursor_trail is enabled. This option accepts two positive float values specifying the fastest and slowest decay times in seconds. The first value corresponds to the fastest decay time (minimum), and the second value corresponds to the slowest decay time (maximum). The second value must be equal to or greater than the first value. Smaller values result in a faster decay of the cursor trail. Adjust these values to control how quickly the cursor trail fades away.
# cursor_trail_decay 0.1 0.6
cursor_trail_decay 0.1 0.3

# Set the distance threshold for starting the cursor trail. This option accepts a positive integer value that represents the minimum number of cells the cursor must move before the trail is started. When the cursor moves less than this threshold, the trail is skipped, reducing unnecessary cursor trail animation.
cursor_trail_start_threshold 2

#: The opacity of the background. A number between zero and one, where
#: one is opaque and zero is fully transparent. This will only work if
#: supported by the OS (for instance, when using a compositor under
#: X11). Note that it only sets the background color's opacity in
#: cells that have the same background color as the default terminal
#: background, so that things like the status bar in vim, powerline
#: prompts, etc. still look good. But it means that if you use a color
#: theme with a background color in your editor, it will not be
#: rendered as transparent. Instead you should change the default
#: background color in your kitty config and not use a background
#: color in the editor color scheme. Or use the escape codes to set
#: the terminals default colors in a shell script to launch your
#: editor. See also transparent_background_colors. Be aware that using
#: a value less than 1.0 is a (possibly significant) performance hit.
#: When using a low value for this setting, it is desirable that you
#: set the background color to a color the matches the general color
#: of the desktop background, for best text rendering. Note that to
#: workaround window managers not doing gamma-corrected blending kitty
#: makes background_opacity non-linear which means, especially for
#: light backgrounds you might need to make the value much lower than
#: you expect to get good results, see 6218
#: <https://github.com/kovidgoyal/kitty/issues/6218> for details.

#: If you want to dynamically change transparency of windows, set
#: dynamic_background_opacity to yes (this is off by default as it has
#: a performance cost). Changing this option when reloading the config
#: will only work if dynamic_background_opacity was enabled in the
#: original config.
background_opacity 1

#: Set to a positive value to enable background blur (blurring of the
#: visuals behind a transparent window) on platforms that support it.
#: Only takes effect when background_opacity is less than one. On
#: macOS, this will also control the blur radius (amount of blurring).
#: Setting it to too high a value will cause severe performance issues
#: and/or rendering artifacts. Usually, values up to 64 work well.
#: Note that this might cause performance issues, depending on how the
#: platform implements it, so use with care. Currently supported on
#: macOS and KDE.
background_blur 20

#: The edge to show the tab bar on, top or bottom.
tab_bar_edge top
tab_bar_style powerline
# tab_bar_style hidden

# I set it to these keys as they're in my homerow mods df (left) or kj (right)
# The default is ctrl+shift
kitty_mod cmd+option
enabled_layouts Horizontal
#: You can also create shortcuts to switch to specific layouts::
map ctrl+cmd+option+u goto_layout tall
map ctrl+cmd+option+i goto_layout fat
map ctrl+cmd+option+o goto_layout stack

# For tabs, only the last directory of the active window's cwd
# I don't now how to do a condition to show the title that I set, but if no
# title just set the last dir in the path
# tab_title_template "{tab.active_wd.rsplit('/', 1)[-1]}"

#::  Reload kitty.conf, applying any changes since the last time it
#::  was loaded. Note that a handful of options cannot be dynamically
#::  changed and require a full restart of kitty. Particularly, when
#::  changing shortcuts for actions located on the macOS global menu
#::  bar, a full restart is needed. You can also map a keybinding to
#::  load a different config file, for example::
#::      map f5 load_config /path/to/alternative/kitty.conf
#::  Note that all options from the original kitty.conf are discarded,
#::  in other words the new configuration *replace* the old ones.
# map kitty_mod+f5 load_config_file
map ctrl+cmd+,   load_config_file

# In kitty, windows are what we usually know as panes in tmux, or basically
# splitting the screen
# map kitty_mod+enter new_window
# map cmd+enter new_window
map cmd+enter launch --cwd=current
map ctrl+l next_window
map ctrl+h previous_window
map ctrl+cmd+h swap_with_window

map ctrl+cmd+option+h resize_window narrower 3
map ctrl+cmd+option+l resize_window wider 3
map ctrl+cmd+option+k resize_window taller
map ctrl+cmd+option+j resize_window shorter 3


#: Close window
map kitty_mod+w close_window

##############################################################################
#                        kitty-scrollback.nvim config                        #
##############################################################################

# # This was recommended by justinmk (neovim core contributor) here:
# # https://www.reddit.com/r/neovim/comments/1nmqjal/comment/nfiif2z/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
# # These 2 options below didn't work for me, because I'm running NVIM v0.11.4, and 0.12 is required
# scrollback_pager nvim --cmd 'call nvim_open_term(0, {})' +'set eventignore=FileType' +'nnoremap q ZQ' +'set nomodified nolist' +'$' -
# scrollback_pager nvim --cmd 'set eventignore=FileType' +'nnoremap q ZQ' +'set nomodified readonly nolist' +'TermHl' +'$' -
# map kitty_mod+z show_scrollback

# This is a command I came up with, allows me to call my own neovim config and
# also disable some plugins that I don't need using the simpler_scrollback var
map kitty_mod+i launch --stdin-source=@screen_scrollback --type=overlay /bin/zsh -c "NVIM_APPNAME=neobean SIMPLER_SCROLLBACK=deeznuts nvim +$ +'nnoremap q ZQ'"

# How to generate the config below?
# After installing the neovim plugin, just run the command
# v --headless +'KittyScrollbackGenerateKittens'
# That generates the config, that config is what I pasted below
# NOTE: This is what shows you the path to the kitty_scrokittyllback_nvim.py file 

# # kitty-scrollback.nvim Kitten alias
# # I replaced `/Users/linkarzu` with `$HOME` on the line below
# action_alias kitty_scrollback_nvim kitten "$HOME/.local/share/neobean/lazy/kitty-scrollback.nvim/python/kitty_scrollback_nvim.py"
# # action_alias kitty_scrollback_nvim kitten /Users/linkarzu/.local/share/neobean/lazy/kitty-scrollback.nvim/python/kitty_scrollback_nvim.py
# # Browse scrollback buffer in nvim
# map kitty_mod+h kitty_scrollback_nvim
# map kitty_mod+l kitty_scrollback_nvim --env NVIM_APPNAME=neobean --env SCROLLBACK_MODE=neobean
# # Browse output of the last shell command in nvim
# # map kitty_mod+l kitty_scrollback_nvim --config ksb_builtin_last_cmd_output
# # Show clicked command output in nvim
# mouse_map ctrl+shift+right press ungrabbed combine : mouse_select_command_output : kitty_scrollback_nvim --config ksb_builtin_last_visited_cmd_output

##############################################################################
#      Kitty Sessions section (To replace tmux), watch this video:           #
#                  https://youtu.be/lWKjvWvjk4Y                              #
##############################################################################

# Save current state to a session file (prompts for path, opens in $EDITOR)
# Also specify the filename when saving the session:
# ~/github/dotfiles-latest/kitty/sessions/dotfiles.kitty-session
map ctrl+shift+s save_as_session --use-foreground-process --relocatable

# Just leaving this here as an example, does not make sense because it would
# restart yabai each time, but useful to understand the alias and combine
# action_alias yabai_restart launch --type=background /bin/zsh -c '"$HOME/github/dotfiles-latest/yabai/yabai_restart.sh"'
# map ctrl+b>h combine : goto_session $HOME/github/dotfiles-latest/kitty/sessions/winhome.kitty-session : yabai_restart

# This is similar to tmux prefix + key
# map ctrl+b>d goto_session $HOME/github/dotfiles-latest/kitty/sessions/dotfiles.kitty-session
# map ctrl+b>o goto_session $HOME/github/dotfiles-latest/kitty/sessions/obsidian.kitty-session
# map ctrl+b>h goto_session $HOME/github/dotfiles-latest/kitty/sessions/home.kitty-session
# map ctrl+b>b goto_session $HOME/github/dotfiles-latest/kitty/sessions/blogpost.kitty-session
# map ctrl+b>p goto_session $HOME/github/dotfiles-latest/kitty/sessions/dots-private.kitty-session
# map ctrl+b>a goto_session $HOME/github/dotfiles-latest/kitty/sessions/lua.kitty-session
# map ctrl+b>k goto_session $HOME/github/dotfiles-latest/kitty/sessions/skitty.kitty-session

# I call this alias after switching to the alternate session
action_alias update_kitty_name launch --type=background /bin/zsh -c '"$HOME/.dotfiles/sketchybar/felixkratz-linkarzu/plugins/kitty_name.sh"'
# map ctrl+b>r update_kitty_name

# Switch to alternate kitty session or previous session
map ctrl+b>l goto_session -1
# map ctrl+b>l combine : goto_session -1 : update_kitty_name

# Browse and select from the list of known projects defined via goto_session commands
map ctrl+b>s goto_session

# kitty tab bar only shows tabs from the currently active session
# this works even if all the sessions run in the same os window
# https://github.com/kovidgoyal/kitty/issues/8911#issuecomment-3222346493
# tab_bar_filter session:~ or session:^$

# When I open a new tab in a session, I want this tab to only show for that
# session
# https://github.com/kovidgoyal/kitty/issues/8911#issuecomment-3224876629
map cmd+t new_tab_with_cwd


# BEGIN_KITTY_FONTS
# font_family      JetBrainsMono Nerd Font Mono
# font_family family='Fira Code'
# END_KITTY_FONTS
